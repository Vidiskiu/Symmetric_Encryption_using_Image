# -*- coding: utf-8 -*-
"""Symmetric_Encryption_using_Image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w3jf9lriz-Qm36tp5oI6AdrQCKAGErB9

# Libraries
"""

import cv2
import numpy as np
from urllib import request
from google.colab.patches import cv2_imshow

"""# Encryption Class"""

def compare(list1, list2):
  for i in list1:
    flag = False
    for j in list2:
      if(i == j):
        flag = True
        continue
    if flag == False:
      return False
  return True

class ImageKeyEncryption:
  def validateKeyImage(self, plaintext, image):
    return compare(plaintext, image)

  def encrypt(self, plaintext, image):
    image = image.reshape(1,256).squeeze()
    plaintext = [ord(char) for char in list(plaintext)]
    image = [int(value) for value in list(image)]
    if not self.validateKeyImage(plaintext, image):
      return print("Image rejected")
    else:
      ciphertext = []
      for value in plaintext:
        ciphertext.append(image.index(value))
      return ciphertext

  def decrypt(self, ciphertext, image):
    image = image.reshape(1,256).squeeze()
    image = [int(value) for value in list(image)]
    plaintext = []
    for value in ciphertext:
      plaintext.append(chr(image[value]))
    return plaintext

"""# Image Fetch"""

imageLocation = request.urlopen('http://answers.opencv.org/upfiles/logo_2.png')
image = np.asarray(bytearray(imageLocation.read()), dtype=np.uint8)
image = cv2.imdecode(image, -1)
# image = cv2.imread(imageLocation)
image = cv2.resize(image, (16,16))
image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

image2 = np.array([int(val) for val in np.linspace(0,255,256)])
image2 = image2.reshape(16,16)

import random
random.shuffle(image2)

cv2_imshow(image2)

plaintext = 'Hello'

encryptor = ImageKeyEncryption()
print(encryptor.encrypt(plaintext, image2))
ciphertext = encryptor.encrypt(plaintext, image2)
print('-----')
print(encryptor.decrypt(ciphertext, image2))